Run this with `cargo run -- -M -s specs/math.txt`.

Mathematical expressions extension.
See the following link to know the syntax.
https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions

Inline-level mathematical expressions:

```````````````````````````````` example
This sentence uses `$` delimiters to show math inline:  $\sqrt{3x-1}+(1+x)^2$
$\sum_{k=1}^n a_k b_k$: Mathematical expression at head of line

`\` may follow just after the first `$`: $\{1, 2, 3\}$
.
<p>This sentence uses <code>$</code> delimiters to show math inline:  <span class="math inline">\sqrt{3x-1}+(1+x)^2</span>
<span class="math inline">\sum_{k=1}^n a_k b_k</span>: Mathematical expression at head of line</p>
<p><code>\</code> may follow just after the first <code>$</code>:  <span class="math inline">\{1, 2, 3\}</span>
````````````````````````````````

Block-level mathematical expressions:

```````````````````````````````` example
**The Cauchy-Schwarz Inequality**

$$\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)$$
.
<p><strong>The Cauchy-Schwarz Inequality</strong></p>
<div class="math block">\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)</div>
````````````````````````````````

Empty expressions are edge cases that are not parsed as mathematical expressions:

```````````````````````````````` example
Oops empty $$ expression.

$$$$

This is also empty: $``$
.
<p>Oops empty $$ expression.</p>
<p>$$$$</p>
<p>This is also empty: $``$</p>
````````````````````````````````

Sole `$` character is handled as normal text. And Inline-level mathematical expressions cannot continue across newlines:

```````````````````````````````` example
Hello $ world.

Dollar at end of line: $
.
<p>Hello $ world.</p>
<p>Dollar at end of line: $</p>
````````````````````````````````

Block-level mathematical expressions can continue across multiple lines:

```````````````````````````````` example
$$\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right)
\left( \sum_{k=1}^n b_k^2 \right)$$
.
<div class="math block">\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right)
\left( \sum_{k=1}^n b_k^2 \right)</div>
````````````````````````````````

`$` character can be escaped with backslash in mathematical expressions:

```````````````````````````````` example
$\$$

$$y = \$ x$$
.
<p><span class="math inline">\$</span></p>
<div class="math block">y = \$ x</div>
````````````````````````````````

Inline math text with backticks ``$`...`$``:

```````````````````````````````` example
this is math inline $`y=x`$ test.
dollar can be contained: $`foo$bar`$
.
<p>this is math inline <span class="math inline">y=x</span> test.
dollar can be contained: <span class="math inline">foo$bar</span></p>
````````````````````````````````

Math expression without backtick cannot start/end with spaces but Math expression with backtick can:

```````````````````````````````` example
these are not math texts: $ y=x$ and $y=x $ and $ y=x $
but these are math texts too: $` y=x`$ and $`y=x `$ and $` y=x `$
.
<p>these are not math texts: $ y=x$ and $y=x $ and $ y=x $
but these are math texts too: <span class="math inline"> y=x</span> and <span class="math inline">y=x </span> and <span class="math inline"> y=x </span></p>
````````````````````````````````
